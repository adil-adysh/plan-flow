# NVDA add-on template SCONSTRUCT file
# Copyright (C) 2012-2025
# This file is covered by the GNU General Public License.
# See the file COPYING.txt for more details.

import os
import sys
import codecs
import gettext
import zipfile
import subprocess

from SCons.Script import (
    Builder,
    Environment,
    Variables,
    BoolVariable,
    Copy,
    EnsurePythonVersion,
)

EnsurePythonVersion(3, 10)
sys.dont_write_bytecode = True

import buildVars


def md2html(source, dest):
    import markdown

    mdExtensions = buildVars.markdownExtensions
    lang = os.path.basename(os.path.dirname(source)).replace("_", "-")
    localeLang = os.path.basename(os.path.dirname(source))
    try:
        _ = gettext.translation("nvda", localedir=os.path.join("addon", "locale"), languages=[localeLang]).gettext
        summary = _(buildVars.addon_info["addon_summary"])
    except Exception:
        summary = buildVars.addon_info["addon_summary"]

    title = f"{summary} {buildVars.addon_info['addon_version']}"
    headerDic = {
        '[[!meta title="': "# ",
        '"]]': " #",
    }

    with codecs.open(source, "r", "utf-8") as f:
        mdText = f.read()
        for k, v in headerDic.items():
            mdText = mdText.replace(k, v, 1)
        htmlText = markdown.markdown(mdText, extensions=mdExtensions)

    docText = "\n".join([
        "<!DOCTYPE html>",
        f'<html lang="{lang}">',
        "<head>",
        '<meta charset="UTF-8">',
        '<meta name="viewport" content="width=device-width, initial-scale=1.0">',
        '<link rel="stylesheet" type="text/css" href="../style.css" media="screen">',
        f"<title>{title}</title>",
        "</head>\n<body>",
        htmlText,
        "</body>\n</html>",
    ])

    with codecs.open(dest, "w", "utf-8") as f:
        f.write(docText)


def mdTool(env):
    mdAction = env.Action(
        lambda target, source, env: md2html(source[0].path, target[0].path),
        lambda target, source, env: f"Generating {target[0]}"
    )
    mdBuilder = env.Builder(
        action=mdAction,
        suffix=".html",
        src_suffix=".md"
    )
    env["BUILDERS"]["markdown"] = mdBuilder


def run_pytest(args=None):
    import glob as _glob
    env_vars = os.environ.copy()
    env_vars["PYTHONPATH"] = "."
    cmd = [sys.executable, "-m", "pytest"]
    if args:
        # If the first arg is 'tests/*.py', expand it
        if len(args) == 1 and args[0] == "tests/*.py":
            files = _glob.glob("tests/*.py")
            cmd.extend(files)
        else:
            cmd.extend(args)
    return subprocess.call(cmd, env=env_vars)


def validateVersionNumber(key, val, env):
    if val == "0.0.0":
        return
    versionNumber = val.split(".")
    if len(versionNumber) < 3 or not all(part.isnumeric() for part in versionNumber):
        raise ValueError("versionNumber must be in major.minor.patch format with integer parts")


vars = Variables()
vars.Add("version", "The version of this build", buildVars.addon_info["addon_version"])
vars.Add("versionNumber", "Version number of the form major.minor.patch", "0.0.0", validateVersionNumber)
vars.Add(BoolVariable("dev", "Whether this is a daily development version", False))
vars.Add("channel", "Update channel for this build", buildVars.addon_info["addon_updateChannel"])

env = Environment(variables=vars, ENV=os.environ, tools=["gettexttool", mdTool])
env.Append(**buildVars.addon_info)

env.Alias("test", env.Command("pytest-all", [], lambda target, source, env: run_pytest()))
env.Alias("test_unit", env.Command("pytest-unit", [], lambda target, source, env: run_pytest(["tests/*.py"])))
env.Alias("test_integration", env.Command("pytest-integration", [], lambda target, source, env: run_pytest(["tests/integration"])))
env.Alias("test_desktop_ui", env.Command("pytest-desktop-ui", [], lambda target, source, env: run_pytest(["tests/desktop_ui"])))


if env["dev"]:
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d")
    env["addon_version"] = f"{timestamp}.0.0"
    env["versionNumber"] = f"{timestamp}.0.0"
    env["channel"] = "dev"
elif env["version"] is not None:
    env["addon_version"] = env["version"]

if "channel" in env and env["channel"] is not None:
    env["addon_updateChannel"] = env["channel"]

buildVars.addon_info["addon_version"] = env["addon_version"]
buildVars.addon_info["addon_updateChannel"] = env["addon_updateChannel"]


def addonGenerator(target, source, env, for_signature):
    return env.Action(
        lambda t, s, e: createAddonBundleFromPath(s[0].abspath, t[0].abspath) and None,
        lambda t, s, e: f"Generating Addon {t[0]}"
    )


def manifestGenerator(target, source, env, for_signature):
    return env.Action(
        lambda t, s, e: generateManifest(s[0].abspath, t[0].abspath) and None,
        lambda t, s, e: f"Generating manifest {t[0]}"
    )


def translatedManifestGenerator(target, source, env, for_signature):
    dir = os.path.abspath(os.path.join(os.path.dirname(str(source[0])), ".."))
    lang = os.path.basename(dir)
    return env.Action(
        lambda t, s, e: generateTranslatedManifest(s[1].abspath, lang, t[0].abspath) and None,
        lambda t, s, e: f"Generating translated manifest {t[0]}"
    )


env["BUILDERS"]["NVDAAddon"] = Builder(generator=addonGenerator)
env["BUILDERS"]["NVDAManifest"] = Builder(generator=manifestGenerator)
env["BUILDERS"]["NVDATranslatedManifest"] = Builder(generator=translatedManifestGenerator)


def expandGlobs(patterns):
    return [f for pattern in patterns for f in env.Glob(pattern)]


def createAddonHelp(dir):
    docsDir = os.path.join(dir, "doc")
    if os.path.isfile("style.css"):
        cssPath = os.path.join(docsDir, "style.css")
        cssTarget = env.Command(cssPath, "style.css", Copy("$TARGET", "$SOURCE"))
        env.Depends(addon, cssTarget)
    if os.path.isfile("readme.md"):
        readmePath = os.path.join(docsDir, buildVars.baseLanguage, "readme.md")
        readmeTarget = env.Command(readmePath, "readme.md", Copy("$TARGET", "$SOURCE"))
        env.Depends(addon, readmeTarget)


def createAddonBundleFromPath(path, dest):
    basedir = os.path.abspath(path)
    with zipfile.ZipFile(dest, "w", zipfile.ZIP_DEFLATED) as z:
        for dir, _, files in os.walk(basedir):
            relPath = os.path.relpath(dir, basedir)
            for filename in files:
                bundlePath = os.path.join(relPath, filename)
                absPath = os.path.join(dir, filename)
                if bundlePath not in buildVars.excludedFiles:
                    z.write(absPath, bundlePath)
    return dest


def generateManifest(source, dest):
    addon_info = buildVars.addon_info
    with codecs.open(source, "r", "utf-8") as f:
        template = f.read()
    manifest = template.format(**addon_info)

    if getattr(buildVars, "brailleTables", {}):
        manifest += "\n[brailleTables]\n"
        for table, props in buildVars.brailleTables.items():
            manifest += f"[[{table}]]\n" + "\n".join(f"{k} = {v}" for k, v in props.items()) + "\n"

    if getattr(buildVars, "symbolDictionaries", {}):
        manifest += "\n[symbolDictionaries]\n"
        for dictionary, props in buildVars.symbolDictionaries.items():
            manifest += f"[[{dictionary}]]\n" + "\n".join(f"{k} = {v}" for k, v in props.items()) + "\n"

    with codecs.open(dest, "w", "utf-8") as f:
        f.write(manifest)


def generateTranslatedManifest(source, language, out):
    _ = gettext.translation("nvda", localedir=os.path.join("addon", "locale"), languages=[language]).gettext
    vars = {
        k: _(buildVars.addon_info[k])
        for k in ("addon_summary", "addon_description")
    }

    with codecs.open(source, "r", "utf-8") as f:
        template = f.read()
    result = template.format(**vars)

    if getattr(buildVars, "brailleTables", {}):
        result += "\n[brailleTables]\n"
        for table in buildVars.brailleTables:
            result += f"[[{table}]]\ndisplayName = {_(buildVars.brailleTables[table]['displayName'])}\n"

    if getattr(buildVars, "symbolDictionaries", {}):
        result += "\n[symbolDictionaries]\n"
        for dictionary in buildVars.symbolDictionaries:
            result += f"[[{dictionary}]]\ndisplayName = {_(buildVars.symbolDictionaries[dictionary]['displayName'])}\n"

    with codecs.open(out, "w", "utf-8") as f:
        f.write(result)


addon = env.NVDAAddon("${addon_name}-${addon_version}.nvda-addon", env.Dir("addon"))

langDirs = env.Glob("addon/locale/*")
moByLang = {}

for langDir in langDirs:
    po = langDir.File("LC_MESSAGES/nvda.po")
    mo = env.gettextMoFile(po)
    moByLang[langDir] = mo
    env.Depends(mo, po)
    translatedManifest = env.NVDATranslatedManifest(langDir.File("manifest.ini"), [mo, "manifest-translated.ini.tpl"])
    env.Depends(translatedManifest, ["buildVars.py"])
    env.Depends(addon, [translatedManifest, mo])

for py in expandGlobs(buildVars.pythonSources):
    env.Depends(addon, py)

createAddonHelp("addon")

for md in env.Glob("addon/doc/*/*.md"):
    lang = os.path.basename(os.path.dirname(md.get_abspath()))
    mo = moByLang.get(lang)
    html = env.markdown(md)
    env.Depends(html, [md])
    if mo:
        env.Depends(html, mo)
    env.Depends(addon, html)

i18nFiles = expandGlobs(buildVars.i18nSources)
gettextvars = {
    "gettext_package_bugs_address": "nvda-translations@groups.io",
    "gettext_package_name": buildVars.addon_info["addon_name"],
    "gettext_package_version": buildVars.addon_info["addon_version"],
}

pot = env.gettextPotFile("${addon_name}.pot", i18nFiles, **gettextvars)
env.Alias("pot", pot)
env.Depends(pot, i18nFiles)

mergePot = env.gettextMergePotFile("${addon_name}-merge.pot", i18nFiles, **gettextvars)
env.Alias("mergePot", mergePot)
env.Depends(mergePot, i18nFiles)

manifest = env.NVDAManifest("addon/manifest.ini", "manifest.ini.tpl")
env.Depends(manifest, "buildVars.py")
env.Depends(addon, manifest)

env.Default(addon)
env.Clean(addon, [".sconsign.dblite", f"addon/doc/{buildVars.baseLanguage}/"])
