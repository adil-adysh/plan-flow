[tool.poetry]
name = "planflow"
version = "0.1.0"
description = "PlanFlow NVDA add-on core logic and utilities."
authors = ["adil-adysh <your-email@example.com>"]
license = "MIT"
readme = "readme.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
tinydb = "^4.8.0"
apscheduler = "^3.10.4"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
ruff = "^0.4.0"
pyright = "^1.1.350"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
[tool.ruff]
line-length = 110

builtins = [
	# translation lookup
	"_",
	# translation lookup
	"ngettext",
	# translation lookup
	"pgettext",
	# translation lookup
	"npgettext",
]

include = [
	"*.py",
	"sconstruct",
]

exclude = [
	".git",
	"__pycache__",
]

[tool.ruff.format]
indent-style = "tab"

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint]
ignore = [
	# indentation contains tabs
	"W191",
]

[tool.ruff.lint.per-file-ignores]
# sconstruct contains many inbuilt functions not recognised by the lint,
# so ignore F821.
"sconstruct" = ["F821"]

[tool.pyright]
pythonPlatform = "Windows"
typeCheckingMode = "strict"

include = [
	"**/*.py",
]

exclude = [
	"sconstruct",
	".git",
	"__pycache__",
	# When excluding concrete paths relative to a directory,
	# not matching multiple folders by name e.g. `__pycache__`,
	# paths are relative to the configuration file.
]

# Tell pyright where to load python code from
extraPaths = [
	"./addon",
]

# General config
analyzeUnannotatedFunctions = true
deprecateTypingAliases = true

# Stricter typing
strictParameterNoneValue = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true

# Compliant rules
reportAbstractUsage = true
reportArgumentType = true
reportAssertAlwaysTrue = true
reportAssertTypeFailure = true
reportAssignmentType = true
reportAttributeAccessIssue = true
reportCallInDefaultInitializer = true
reportCallIssue = true
reportConstantRedefinition = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportGeneralTypeIssues = true
reportImplicitOverride = true
reportImplicitStringConcatenation = true
reportImportCycles = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInconsistentOverload = true
reportIndexIssue = true
reportInvalidStringEscapeSequence = true
reportInvalidStubStatement = true
reportInvalidTypeArguments = true
reportInvalidTypeForm = true
reportInvalidTypeVarUse = true
reportMatchNotExhaustive = true
reportMissingImports = true
reportMissingModuleSource = true
reportMissingParameterType = true
reportMissingSuperCall = true
reportMissingTypeArgument = true
reportNoOverloadImplementation = true
reportOperatorIssue = true
reportOptionalCall = true
reportOptionalContextManager = true
reportOptionalIterable = true
reportOptionalMemberAccess = true
reportOptionalOperand = true
reportOptionalSubscript = true
reportOverlappingOverload = true
reportPossiblyUnboundVariable = true
reportPrivateImportUsage = true
reportPrivateUsage = true
reportPropertyTypeMismatch = true
reportRedeclaration = true
reportReturnType = true
reportSelfClsParameterName = true
reportShadowedImports = true
reportTypeCommentUsage = true
reportTypedDictNotRequiredAccess = true
reportUnboundVariable = true
reportUndefinedVariable = true
reportUnhashable = true
reportUninitializedInstanceVariable = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownMemberType = true
reportUnknownParameterType = true
reportUnknownVariableType = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = true
reportUnsupportedDunderAll = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportUnusedCallResult = true
reportUnusedClass = true
reportUnusedCoroutine = true
reportUnusedExcept = true
reportUnusedExpression = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
reportWildcardImportFromLibrary = true

reportDeprecated = true

# Can be enabled by generating type stubs for modules via pyright CLI
reportMissingTypeStubs = false

# Bad rules
# These are sorted alphabetically and should be enabled and moved to compliant rules section when resolved.

[tool.pytest.ini_options]
markers = [
	"edge: edge case tests for Scheduler"
]
